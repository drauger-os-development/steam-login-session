#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  steam-de
#
#  Copyright 2025 Thomas Castleman <batcastle@draugeros.org>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
"""Launch Steam BPM as the DE"""
from __future__ import print_function
import sys
import subprocess
import os
import time
import json
import psutil


def __eprint__(*args, **kwargs):
    """Make it easier for us to print to stderr"""
    print(*args, file=sys.stderr, **kwargs)


if sys.version_info[0] == 2:
    __eprint__("Please run with Python 3 as Python 2 is End-of-Life.")
    sys.exit(2)


# Random stuffs
ARGC = len(sys.argv)
SIGTERM = 15
PID_FILE_LOC = "/tmp/steam-de.pid"
SETTINGS_DIR = "../../etc/steam-login-session"
if not os.path.exists(SETTINGS_DIR):
    SETTINGS_DIR = "/etc/steam-login-session"
settings_file = f"{SETTINGS_DIR}/settings.json"
launch_command_file = f"{SETTINGS_DIR}/launch_commands.json"
# Documentation stuffs
VERSION = "15.0.0"
HELP = f"""steam-login-session, Version {VERSION}
-h, --help                     Print this help dialog and exit.
-k, --kill-steam [time_out]    Kill Steam and log out the user.
                               time_out: wait this long to log out the user
                                         can be any value, in seconds,
                                         over 0.

-l, --logout [time_out]        Same as above.
-v, --version                  Print version and exit.

Pass nothing to start Steam DE."""

# Load settings
with open(settings_file, "r") as file:
    settings = json.load(file)

with open(launch_command_file, "r") as file:
    launch_commands = json.load(file)

# Commands we need to run
_COMMANDS = {
    # Configure X11 if using Nvidia
    "config_nvidia": ["/usr/bin/nvidia-settings", "-l"],
    # DPMS: Display Power Managment signaling
    "dpms_off": ["/usr/bin/xset", "-dpms"],
    "screen_blank_off": ["/usr/bin/xset", "s", "off"],
    "start_steam": ["-bigpicture"],
    "kill_steam": ["-shutdown"]}

# Apply settings
# STEAM LAUNCH COMMAND
if settings["steam_type"] in launch_commands["steam"]:
    _COMMANDS["start_steam"] = launch_commands["steam"][settings["steam_type"]] + _COMMANDS["start_steam"]
    _COMMANDS["kill_steam"] = launch_commands["steam"][settings["steam_type"]] + _COMMANDS["kill_steam"]
elif settings["steam_type"].lower() == "auto":
    for each in launch_commands["steam"]:
        if os.path.exists(launch_commands["steam"][each][0]):
            _COMMANDS["start_steam"] = launch_commands["steam"][each] + _COMMANDS["start_steam"]
            _COMMANDS["kill_steam"] = launch_commands["steam"][each] + _COMMANDS["kill_steam"]
else:
    __eprint__("CANNOT FIND STEAM! EXITING!")
    sys.exit(1)

if _COMMANDS["start_steam"][0] == "/usr/bin/flatpak":
    _COMMANDS["start_steam"].insert(-1, "@@")
    _COMMANDS["start_steam"].append("@@")

if _COMMANDS["kill_steam"][0] == "/usr/bin/flatpak":
    _COMMANDS["kill_steam"].insert(-1, "@@")
    _COMMANDS["kill_steam"].append("@@")


# WINDOW MANAGER
if settings["window_manager"] in launch_commands["window_manager"]:
    _COMMANDS["launch_wm"] = launch_commands["window_manager"][settings["window_manager"]]["command"]
elif settings["window_manager"].lower() == "auto":
    for each in launch_commands["window_manager"]:
        if os.path.exists(launch_commands["window_manager"][each]["command"][0]):
            _COMMANDS["launch_wm"] = launch_commands["window_manager"][each]["command"]
else:
    __eprint__("CANNOT FIND WINDOW MANAGER! EXITING!")
    sys.exit(1)


# COMPOSITOR
for each in launch_commands["window_manager"]:
    if launch_commands["window_manager"][each]["command"] == _COMMANDS["launch_wm"]:
        if launch_commands["window_manager"][each]["supports_comp"]:
            if settings["compositor"] in (True, "on", "yes"):
                _COMMANDS["launch_wm"][-1] = _COMMANDS["launch_wm"][-1] + "on"
            else:
                _COMMANDS["launch_wm"][-1] = _COMMANDS["launch_wm"][-1] + "off"

# STEAM LAUNCH COMMAND EXTRAS
if settings["steam_os_mode"] in (True, "on", "yes"):
    add = "-steamos"
    if settings["on_deck"] in (True, "on", "yes"):
        add = add + "3"
    _COMMANDS["start_steam"].append(add)

if settings["on_deck"] in (True, "on", "yes"):
    _COMMANDS["start_steam"].append("-steamdeck")

if settings["deck_ui_mode"] in (False, "off", "no", "disable"):
    _COMMANDS["start_steam"].append("-oldbigpicture")

# Define all the functions we will need
def is_steam_running():
    """Check if Steam is running

    Return value will be in format:

    (bool, list)

    Where bool is a boolean indicating whether Steam is running or not
    and list is a list of pids for steam. If Steam is not running, this list
    will contain only -1.
    """
    process_name = "steam"
    pids = []
    # Iterate over the all the running process
    for proc in psutil.process_iter():
        try:
            # Check if process name contains the given name string.
            if process_name in proc.name().lower():
                pids.append(proc.pid)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    if len(pids) == 0:
        return (False, [-1])
    return (True, pids)


def _kill_steam_de():
    """Kill Steam-DE"""
    with open(PID_FILE_LOC, "r") as pid_file:
        pid = int(pid_file.read())
    try:
        os.kill(pid, 15)
    except ProcessLookupError:
        pass
    try:
        os.remove(PID_FILE_LOC)
    except FileNotFoundError:
        pass


def _kill_steam_nicely(time_out):
    """Kill Steam gracefully"""
    if isinstance(time_out, (int, float)):
        time.sleep(time_out)
    subprocess.check_call(_COMMANDS["kill_steam"])


def _kill_steam_force():
    """Kill Steam to log the user out.

    time_out: How long to wait before killing steam
    """
    pids = is_steam_running()
    if pids[0]:
        for each in pids[1]:
            os.kill(each, 15)
    else:
        __eprint__("WARNING: Steam is not running. Killing steam-de instead . . .")



if __name__ == "__main__":
    if ARGC > 1:
        if sys.argv[1] in ("-h", "--help"):
            print(HELP)
            sys.exit(0)
        elif sys.argv[1] in ("-l", "-k", "--kill-steam", "--logout"):
            if ARGC > 2:
                try:
                    _kill_steam_nicely(float(sys.argv[2]))
                    time.sleep(0.1)
                    if is_steam_running()[0]:
                        _kill_steam_force()
                        time.sleep(0.1)
                        if is_steam_running()[0]:
                            _kill_steam_de()

                except ValueError:
                    __eprint__("ERROR: %s is not a valid length of time")
                    print(HELP)
                    sys.exit(1)
            else:
                _kill_steam_nicely(0)
                time.sleep(0.1)
                if is_steam_running()[0]:
                    _kill_steam_force()
                    time.sleep(0.1)
                    if is_steam_running()[0]:
                        _kill_steam_de()
        elif sys.argv[1] in ("-v", "--version"):
            print(VERSION)
            sys.exit(0)
        else:
            __eprint__("ERROR: %s : Not an understood flag")
            print(HELP)
            sys.exit(2)
    else:
        with open(PID_FILE_LOC, "w+") as pid_file:
            pid_file.write(str(os.getpid()))
        _steam_log_stdout = open("/tmp/steam_de-steam.log", "w+")
        _steam_log_stderr = open("/tmp/steam_de-steam_err.log", "w+")
        _wm_log_stdout = open("/tmp/steam_de-wm.log", "w+")
        _wm_log_stderr = open("/tmp/steam_de-wm_err.log", "w+")
        _etc_log = open("/tmp/steam_de-etc.log", "w+")
        OUTPUT = is_steam_running()
        if OUTPUT[0]:
            for each in OUTPUT[1]:
                os.kill(each, SIGTERM)
        pid = subprocess.Popen(_COMMANDS["launch_wm"],
                               stdout=_wm_log_stdout,
                               stderr=_wm_log_stderr).pid
        # Send Nvidia settings to X11 if using Nvidia
        if os.path.isfile(_COMMANDS["config_nvidia"][0]):
            subprocess.check_call(_COMMANDS["config_nvidia"])
        # Give it a sec to get going
        time.sleep(0.1)
        subprocess.check_call(_COMMANDS["dpms_off"],
                              stdout=_etc_log,
                              stderr=_etc_log)
        subprocess.check_call(_COMMANDS["screen_blank_off"],
                              stdout=_etc_log,
                              stderr=_etc_log)
        # Close this log since it won't be written to anymore
        _etc_log.flush()
        _etc_log.close()
        # Make sure everything is getting going.
        time.sleep(0.25)
        subprocess.check_call(_COMMANDS["start_steam"],
                              stdout=_steam_log_stdout,
                              stderr=_steam_log_stderr)
        # Wait for a few seconds for Steam to get going before we start monitoring it
        time.sleep(3)
        while True:
            OUTPUT = is_steam_running()
            if OUTPUT[0] is False:
                os.kill(pid, 15)
                break
            time.sleep(1)
        # Flush buffers then close files
        _steam_log_stdout.flush()
        _steam_log_stderr.flush()
        _wm_log_stdout.flush()
        _wm_log_stderr.flush()
        _steam_log_stdout.close()
        _steam_log_stderr.close()
        _wm_log_stdout.close()
        _wm_log_stderr.close()
        # Close up shop and exit
        os.remove(PID_FILE_LOC)
